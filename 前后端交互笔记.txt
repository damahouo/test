网页请求服务器上的数据，需要用到XMLHttpRequest对象
var xhrOBJ= new XMLHttpRequest() 通过实例化的对象请求数据

向服务器请求数据方式 get拿资源  post推送资源 两种方式

Ajax 实现网页与服务器之间的数据交互

$.get()    $.post()   $.ajax()
$.get(url ,[data],[callback] )  
url 地址 必填
data :请求资源期间要携带的参数 对象类型
callback：请求成功时的回调函数 函数类型
$.ajax({type:`GET`,url:``,data:{},success:fun(){}})
例子：
$('#btnGET').on('click', function () {
        $.ajax({
          method: 'GET\/post',
          url: 'https://ajax-base-api-t.itheima.net/api/getbooks',
          data: {id: 1},
          success: function (res) {
            console.log(res)
          }
        })
      })


<form>标签的属性	get适合提交少量，简单的数据，post适合提交大量，复杂，或包含文件上传的数据
action		URL地址			规定当提交表单时，向何处发送表单数据  不指定时，默认值是当前页面的url
method		get或post			规定以何种方式把表单数据提交到 action URL
enctype					规定在发送表单数据之前如何对其进行编码
		application/x-www-form-urlencoded 	在发送前编码所有字符（默认）
		multipart/form-data		不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。
		text/plain				空格转换为 “+” 加号，但不对特殊字符编码。（很少用）
target					规定在何处打开 action URL
		_blank			在新窗口中打开。		
		_self			默认。在相同的框架中打开。
		_parent			在父框架集中打开。（很少用）		
		_top			在整个窗口中打开。（很少用）
		framename		在指定的框架中打开。（很少用）

表单同步提交 问题：
1，提交后，整个页面会发生跳转，跳转到action URL 所指向的地址，用户体验差
2，页面之前的状态和数据会消失
解决方案，表单只负责采集数据，ajax负责将数据提交到服务器

获取表单里所有填写的数据
$(`form`).serialize()		可以一次性获取表单中所有数据，一定要写name属性表单全部信息

模板引擎
减少字符串的拼接操作
使代码结构更清晰
使代码更易于阅读与维护
art-template模板引擎 中文官网首页为 http://aui.github.io/art-template/zh-cn/index.html
使用步骤
1，导入art-template
2，定义数据
3，定义模板		模板一定要定义在script标签中type=“text/html” 
4，调用template		template（`模板的id不用加#`,`数据`） 模板里的{{}}表示将来要填充的数据  返回值是渲染好的html标签结构的字符串
5，渲染html结构

标准语法
art-template 提供了 {{ }} 这种语法格式，在 {{ }} 内可以进行变量输出，或循环数组等操作，这种 {{ }} 语法在 art-template 中被称为标准语法。
2. 标准语法 - 输出
	{{value}}
	{{obj.key}}
	{{obj['key']}}
	{{a ? b : c}}
	{{a || b}}
	{{a + b}}
在 {{ }} 语法中，可以进行变量的输出、对象属性的输出、三元表达式输出、逻辑或输出、加减乘除等表达式输出。

3. 标准语法 – 原文输出
{{@ value }}
如果要输出的 value 值中，包含了 HTML 标签结构，则需要使用原文输出语法，才能保证 HTML 标签被正常渲染。 

4. 标准语法 – 条件输出
如果要实现条件输出，则可以在 {{ }} 中使用 if … else if … /if 的方式，进行按需输出。
{{if value}} 按需输出的内容 {{/if}}

{{if v1}} 按需输出的内容 {{else if v2}} 按需输出的内容 {{/if}}

5. 标准语法 – 循环输出（arr不用写选择器比如data.arr,直接写arr即可循环arr数组）
如果要实现循环输出，则可以在 {{ }} 内，通过 each 语法循环数组，当前循环的索引使用 $index 进行访问，当前的循环项使用 $value 进行访问。
{{each arr}}
    {{$index}} {{$value}}
{{/each}}
例子：
{{each hobby}}
        <li style="list-style: none;">
          循环的索引是{{$index}}循环项是{{$value}}
        </li>
{{/each}}

6. 标准语法 – 过滤器
需处理的值--->过滤器函数--->输出新值
过滤器的本质，就是一个 function 处理函数。
{{value | filterName}}  :将value传给函数filterName，最终输出新值
template.defaults.imports.filterName = function(value){/*return处理的结果*/}    ！！！此定义函数要写在最前面，写后面将导致引擎无法找到该函数

XMLHttpRequest（简称 xhr）是浏览器提供的 Javascript 对象，通过它，可以请求服务器上的数据资源。之前所学的 jQuery 中的 Ajax 函数，就是基于 xhr 对象封装出来的。

// 1. 创建 XHR 对象
var xhr = new XMLHttpRequest()
// 2. 调用 open 函数，指定 请求方式 与 URL地址
xhr.open('GET', 'https://ajax-base-api-t.itheima.net/api/getbooks')
// 3. 调用 send 函数，发起 Ajax 请求
xhr.send()
// 4. 监听 onreadystatechange 事件
xhr.onreadystatechange = function() {
    // 4.1 监听 xhr 对象的请求状态
 readyState ；与服务器响应的状态 status
    if (xhr.readyState === 4 && xhr.status === 200) {
        // 4.2 打印服务器响应回来的数据
        console.log(xhr.responseText)
    }
}

XMLHttpRequest 对象的 readyState 属性，用来表示当前 Ajax 请求所处的状态。每个 Ajax 请求必然处于以下状态中的一个：

0	UNSENT		XMLHttpRequest 对象已被创建，但尚未调用 open方法。
1	OPENED		open() 方法已经被调用
2	HEADERS_RECEIVED send() 方法已经被调用，响应头也已经被接收。
3	LOADING		数据接收中，此时 response 属性中已经包含部分数据
4	DONE		Ajax 请求完成，这意味着数据传输已经彻底完成或失败

查询字符串定义：查询字符串（URL 参数）是指在 URL 的末尾加上用于向服务器发送信息的字符串（变量）。
格式：将英文的 ? 放在URL 的末尾，然后再加上 参数＝值 ，想加上多个参数的话，使用 & 符号进行分隔。以这个形式，可以将想要发送给服务器的数据添加到 URL 中。

浏览器提供了 URL 编码与解码的 API，分别是：
encodeURI()  编码的函数
decodeURI()  解码的函数
更多关于 URL 编码的知识，请参考如下博客：
https://blog.csdn.net/Lxd_0111/article/details/78028889


使用xhr发起post请求
// 1. 创建 xhr 对象
var xhr = new XMLHttpRequest()
// 2. 调用 open()
xhr.open('POST', 'https://ajax-base-api-t.itheima.net/api/addbook')
// 3. 设置 Content-Type 属性（固定写法）
xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')
// 4. 调用 send()，同时将数据以查询字符串的形式，提交给服务器
xhr.send('bookname=水浒传&author=施耐庵&publisher=天津图书出版社')
// 5. 监听 onreadystatechange 事件
xhr.onreadystatechange = function() {
    if (xhr.readyState === 4 && xhr.status === 200) {
        console.log(xhr.responseText)
    }
}

 xhr.timeout = 3000		设置请求等待时间
 xhr.ontimeout = function(event){	指定请求时间的回调函数
     alert('请求超时！')
 }

1判断是否选择了文件
 // 1. 获取上传文件的按钮
 var btnUpload = document.querySelector('#btnUpload')
 // 2. 为按钮添加 click 事件监听
 btnUpload.addEventListener('click', function() {
     // 3. 获取到选择的文件列表！
     var files = document.querySelector('#file1').files
     if (files.length <= 0) {
         return alert('请选择要上传的文件！')
     }
     // ...后续业务逻辑
 })

3. 向FormData中追加文件
 // 1. 创建 FormData 对象
 var fd = new FormData()
 // 2. 向 FormData 中追加文件
 fd.append('avatar', files[0])
4. 使用 xhr 发起上传文件的请求
// 1. 创建 xhr 对象
 var xhr = new XMLHttpRequest()
 // 2. 调用 open 函数，指定请求类型与URL地址。其中，请求类型必须为 POST
 xhr.open('POST', 'https://ajax-base-api-t.itheima.net/api/upload/avatar')
 // 3. 发起请求
 xhr.send(fd)
4.5 显示文件上传进度
 // 创建 XHR 对象
 var xhr = new XMLHttpRequest()
 // 监听 xhr.upload 的 onprogress 事件
 xhr.upload.onprogress = function(e) {
    // e.lengthComputable 是一个布尔值，表示当前上传的资源是否具有可计算的长度
    if (e.lengthComputable) {
        // e.loaded 已传输的字节
        // e.total  需传输的总字节
        var percentComplete = Math.ceil((e.loaded / e.total) * 100)
    }
 }
4. 监听上传完成的事件
 xhr.upload.onload = function() {
     $('#percent')
         // 移除上传中的类样式
         .removeClass()
         // 添加上传完成的类样式
         .addClass('progress-bar progress-bar-success')
 }

.files    dom  操作，jq需要先转dom才能执行  选择文件列表

JQ实现文件上传
1. 定义UI结构
   <!-- 导入 jQuery -->
    <script src="./lib/jquery.js"></script>

    <!-- 文件选择框 -->
    <input type="file" id="file1" />
    <!-- 上传文件按钮 -->
    <button id="btnUpload">上传</button>
2. 验证是否选择了文件
   
 $('#btnUpload').on('click', function() {
     // 1. 将 jQuery 对象转化为 DOM 对象，并获取选中的文件列表
     var files = $('#file1')[0].files
     // 2. 判断是否选择了文件
     if (files.length <= 0) {
         return alert('请选择图片后再上传！‘)
     }
 })

3. 向FormData中追加文件
 // 向 FormData 中追加文件
 var fd = new FormData()
 fd.append('avatar', files[0])

4. 使用jQuery发起上传文件的请求
 $.ajax({
     method: 'POST',
     url: 'https://ajax-base-api-t.itheima.net/api/upload/avatar',
     data: fd,
     // 不修改 Content-Type 属性，使用 FormData 默认的 Content-Type 值
     contentType: false,
     // 不对 FormData 中的数据进行 url 编码，而是将 FormData 数据原样发送到服务器
     processData: false,
     success: function(res) {
         console.log(res)
     }
 })


5.2 jQuery实现loading效果
1. ajaxStart(callback)		动态监听请求开始
Ajax 请求开始时，执行 ajaxStart 函数。可以在 ajaxStart 的 callback 中显示 loading 效果，示例代码如下：
 // 自 jQuery 版本 1.8 起，该方法只能被附加到文档
 $(document).ajaxStart(function() {
     $('#loading').show()
 })
注意： $(document).ajaxStart() 函数会监听当前文档内所有的 Ajax 请求。

2. ajaxStop(callback)		动态监听请求结束
Ajax 请求结束时，执行 ajaxStop 函数。可以在 ajaxStop 的 callback 中隐藏 loading 效果，示例代码如下：   
 // 自 jQuery 版本 1.8 起，该方法只能被附加到文档
 $(document).ajaxStop(function() {
     $('#loading').hide()
 })

axios是只专注于网络数据请求的库 
axios 发起 get 请求的语法：
 axios.get('url', { params: { /*参数*/ } }).then(callback)
具体的请求示例如下：
 // 请求的 URL 地址
 var url = 'https://ajax-base-api-t.itheima.net/api/get'
 // 请求的参数对象
 var paramsObj = { name: 'zs', age: 20 }
 // 调用 axios.get() 发起 GET 请求
 axios.get(url, { params: paramsObj }).then(function(res) {
     // res.data 是服务器返回的数据
     var result = res.data  //这里的res.data 才是服务器响应的真实数据，res是axios包装的数据
     console.log(res)
 })


axios 发起 post 请求的语法：
 axios.post('url', { /*参数*/ }).then(callback)
 具体请求方式如下
// 请求的 URL 地址
 var url = 'http://www.liulongbin.top:3006/api/post'
 // 要提交到服务器的数据
 var dataObj = { location: '北京', address: '顺义' }
 // 调用 axios.post() 发起 POST 请求
 axios.post(url, dataObj).then(function(res) {
     // res.data 是服务器返回的数据
     var result = res.data
     console.log(result)
 })

axios 也提供了类似于 jQuery 中 $.ajax() 的函数，语法如下：
 axios({
     method: '请求类型',
     url: '请求的URL地址',
     data: { /* POST数据 */ },
     params: { /* GET参数 */ }
 }) .then(callback)


jQuery 提供的 $.ajax() 函数，除了可以发起真正的 Ajax 数据请求之外，还能够发起 JSONP 数据请求，例如：
 $.ajax({
    url: 'http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&age=20',
    // 如果要使用 $.ajax() 发起 JSONP 请求，必须指定 datatype 为 jsonp
    dataType: 'jsonp',
// 发送到服务端的参数名称，默认值为 callback  （一般不会修改）
    jsonp: 'callback', 
// 自定义的回调函数名称，默认值为 jQueryxxx 格式
    jsonpCallback: 'abc',
    success: function(res) {
       console.log(res)
    }
 })
默认情况下，使用 jQuery 发起 JSONP 请求，会自动携带一个 callback=jQueryxxx 的参数，jQueryxxx 是随机生成的一个回调函数名称。

关于更多请求头字段的描述，可以查看 MDN 官方文档：https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers
Accept 			客户端可识别的响应内容类型列表
User-Agent		产生请求的浏览器类型
Content-Type		客户端告诉服务器实际发送的数据类型
Accept-Language		用户期望获得的自然语言的优先顺序


-------------------------------git---------------------------
git init 		初始化git仓库
git status 或 git status -s 查看文件状态
		？？	未跟踪
		红M	已修改，未放暂存区
		绿M 	已修改，已放暂存区
		A	新添加到了暂存区
		绿D	该文件已标记移除，将从git仓库移除
git add.		一次性将文件加入暂存区 不加点加文件名表示只添加一个文件到暂存区
git commit -m“”	提交更新，并附加描述信息
git checkout -- 文件名 撤销对文件修改，一旦撤销无法恢复，慎用
git reset HEAD	一次性将所有文件移除暂存区
git commit -a -m	跳过添加暂存区步骤，所有文件直接暂存并提交
git rm -f 文件名	从git仓库和工作区一并移除文件
git rm --cached 文件名	只从git仓库移除文件
.gitignore文件	里面写忽略的文件名 加/表示是文件夹 支持正则匹配

git log 列出所有提交历史
git log -2		列出提交历史并只看两条
git log --pretty=onelin  一行展示所有提交历史
git rest --hard<id> 退回到指定id版本
git refflog --pretty=online 在退回到旧版本中时查看所有的历史更新记录 再执行回到指定id版本中即可

 		 