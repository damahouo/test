使用webpack需要做那些准备工作 初始化包环境
yarn init 
安装依赖包
yarn add webpack webpack-cli -D
配置scripts （自定义命令） 创建 package中定义：
"scripts":{
    "build":"webpack"
  }


			yarn 无法安装问题
yarn : 无法加载文件 C:\Users\Administrator\AppData\Roaming\npm\yarn.ps1,因为在此系统因为在此系统上禁止运行脚本。

解决方法：

1、在windows搜索powershell，右键以管理员身份运行

2、在本地计算机上运行您编写的未签名脚本和来自其他用户的签名脚本，使用以下命令将计算机上的 执行策略更改为 RemoteSigned
执行：

set-ExecutionPolicy RemoteSigned
选择Y，回车

再次运行yarn ***，问题解决了


	webpack打包
	需求： 2个js文件 ->打包成1个js文件
分析：
①：新建src下的资源/index.js
②：add.js – 定义求和函数并导出
③：index.js – 引入add模块并使用函数输出结果
④：执行 `yarn build` 自定义命令, 进行打包 (确保终端路径在src的父级文件夹)
⑤：打包后默认生成dist和main.js, 观察其中代码
	webpack再次打包
	需求：代码更多后, 如何打包呢?
分析：
①：src下新建tool/tool.js
②：定义数组求和函数导出
③：index.js – 引入tool模块的函数并使用, 打印结果
④：执行 `yarn build` 自定义命令, 进行打包 (确保终端路径在src的父级文件夹)
⑤：打包后默认生成dist和main.js, 观察其中代码

---------------------------------------------------------------------------------------------------------------
配置文档: https://webpack.docschina.org/concepts/#entry
① 新建项目空白目录，并运行 npm init –y 命令，初始化包管理配置文件 package.json
② 新建 src 源代码目录
③ 新建 src -> index.html 首页和 src -> index.js 脚本文件
④ 初始化首页基本的结构
⑤ 运行 npm install jquery –S 命令，安装 jQuery
⑥ 通过 ES6 模块化的方式导入 jQuery，实现列表隔行变色效果

npm i jquery -S   -S表示包记录在dependencies 节点下
npm install webpack@5.42.1 webpack-cli -D    (cli不要用旧版本，会导致自动更新插件失效 4.10.0不会)
① 在项目根目录中，创建名为 webpack.config.js 的 webpack 配置文件，并初始化如下的基本配置：
module.exports = {
    mode:'development'  //mode用来指定构建模式： development or production  //前者是开始时设置模式，后者是上线设置模式 快但大 慢却小
}
② 在 package.json 的 scripts 节点下，新增 dev 脚本如下：
"scripts": {
    "dev":"webpack"     //dev 是自己起的名字
  },
在终端中运行 npm run dev 命令，启动 webpack 进行项目的打包构建

在 webpack 4.x 和 5.x 的版本中，有如下的默认约定：
① 默认的打包入口文件为 src -> index.js
② 默认的输出文件路径为 dist -> main.js
注意：可以在 webpack.config.js 中修改打包的默认约定

在 webpack.config.js 配置文件中，通过 entry 节点指定打包的入口。通过 output 节点指定打包的出口。
示例代码如下
const path =  require('path')

module.exports = {
    mode: 'production',
    entry: path.join(__dirname, './src/index1.js') , //更换打包入口文件路径
    output: {
        path: path.join(__dirname,'dist'), //指定存到哪个目录
        filename:'boundle.js'           //指定生成文件名
    }
}

1. webpack 插件的作用
通过安装和配置第三方的插件，可以拓展 webpack 的能力，从而让 webpack 用起来更方便。最常用的
webpack 插件有如下两个：
① webpack-dev-server    //webpack-dev-server 可以让 webpack 监听项目源代码的变化，从而进行自动打包构建。
npm install webpack-dev-server@3.11.2 -D
⚫ 类似于 node.js 阶段用到的 nodemon 工具
⚫ 每当修改了源代码，webpack 会自动进行项目的打包和构建
② html-webpack-plugin   
npm install html-webpack-plugin@5.3.2 -D
⚫ webpack 中的 HTML 插件（类似于一个模板引擎插件）
⚫ 可以通过此插件自定制 index.html 页面的内容

	2.2 配置 webpack-dev-server  （实时打包功能）
① 修改 package.json -> scripts 中的 dev 命令如下：
"scripts": {
    "dev": "webpack serve"
  },
② 再次运行 npm run dev 命令，重新进行项目的打包 	因为生成的文件是放置到内存磁盘中，需要更改引用路径
③ 在浏览器中访问 http://localhost:8080 地址，查看自动打包效果  
注意：webpack-dev-server 会启动一个实时打包的 http 服务器

	2.3配置 html-webpack-plugin  （在webpack.config.js配置文件中配置
// 导入html-webpack-plugin 这个插件 得到插件的构造函数
const HtmlPlugin = require(`html-webpack-plugin`)
// new 构造函数，创建插件的实例对象
const htmlPlugin = new HtmlPlugin({
    // 指定要复制哪个页面
    template: './src/index.html',
    // 指定复制出来的文件名和存放路径
    filename:'./index.html'
})
在module.exports中暴露出去
module.exports = {
    plugins:[htmlPlugin],    //这个配置一定要放在output配置之后
}  

在 webpack.config.js 配置文件中，可以通过 devServer 节点对 webpack-dev-server 插件进行更多的配置，
示例代码如下：
module.exports = {
 devServer: {
        open: true,   //初次打包完成后自动打开浏览器
        port: 80,      //修改端口号
        host:'127.0.0.1' //指定运行的主机地址
    }}


		3. 打包处理 css 文件
① 运行 npm i style-loader@3.0.0 css-loader@5.2.6 -D 命令，安装处理 css 文件的 loader
② 在 webpack.config.js 的 module -> rules 数组中，添加 loader 规则如下：
module: {
        rules: [
            // 定义不同模块定义的loder
            {test:/\.css$/,use:['style-loader','css-loader']},
        ]
    }
其中，test 表示匹配的文件类型， use 表示对应要调用的 loader
注意：
⚫ use 数组中指定的 loader 顺序是固定的
⚫ 多个 loader 的调用顺序是：从后往前调用
